import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import MonacoEditor from "@monaco-editor/react";
import { Check, Code, Copy } from "lucide-react";
import React, { useState } from "react";

interface GeneratedCodeProps {
  generatedCode: string;
  language: string;
  provider: string;
  model: string;
}

interface LanguageConfig {
  monaco: string;
  framework: string;
  badgeColor: string;
}

const languageConfigs: { [key: string]: LanguageConfig } = {
  javascript: {
    monaco: "javascript",
    framework: "Jest",
    badgeColor: "bg-yellow-100 text-yellow-800 hover:bg-yellow-200",
  },
  typescript: {
    monaco: "typescript",
    framework: "Jest",
    badgeColor: "bg-blue-100 text-blue-800 hover:bg-blue-200",
  },
  python: {
    monaco: "python",
    framework: "pytest",
    badgeColor: "bg-blue-100 text-blue-800 hover:bg-blue-200",
  },
  java: {
    monaco: "java",
    framework: "JUnit",
    badgeColor: "bg-red-100 text-red-800 hover:bg-red-200",
  },
  go: {
    monaco: "go",
    framework: "testing",
    badgeColor: "bg-cyan-100 text-cyan-800 hover:bg-cyan-200",
  },
  rust: {
    monaco: "rust",
    framework: "cargo test",
    badgeColor: "bg-orange-100 text-orange-800 hover:bg-orange-200",
  },
};

const GeneratedCode: React.FC<GeneratedCodeProps> = ({
  generatedCode,
  language,
  provider,
  model,
}) => {
  const [copied, setCopied] = useState<boolean>(false);

  const config = languageConfigs[language] || languageConfigs.javascript;

  const handleCopy = async (): Promise<void> => {
    try {
      await navigator.clipboard.writeText(generatedCode);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Failed to copy code:", err);
    }
  };

  return (
    <div className="h-[90vh] w-[35vw] bg-background border-l border-border shadow-2xl">
      <Card className="h-full rounded-none border-0 bg-card">
        <CardHeader className="border-b border-border bg-muted/30 p-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-green-500/10 rounded-lg">
                <Code className="h-5 w-5 text-green-600" />
              </div>
              <div>
                <h2 className="text-lg font-semibold text-foreground">
                  Generated Tests
                </h2>
                <p className="text-sm text-muted-foreground">
                  Generated by {provider} ({model})
                </p>
              </div>
            </div>
            <Badge
              variant="secondary"
              className={`${config.badgeColor} transition-colors`}
            >
              {config.framework}
            </Badge>
          </div>

          <div className="flex items-center gap-2 mt-4">
            <Button
              variant="outline"
              size="sm"
              onClick={handleCopy}
              className="gap-2 hover:bg-accent"
            >
              {copied ? (
                <>
                  <Check className="h-4 w-4" />
                  Copied!
                </>
              ) : (
                <>
                  <Copy className="h-4 w-4" />
                  Copy Tests
                </>
              )}
            </Button>

            <div className="text-sm text-muted-foreground ml-2">
              {generatedCode.split("\n").length} lines â€¢ {generatedCode.length}{" "}
              chars
            </div>
          </div>
        </CardHeader>

        <CardContent className="flex-1 p-0 overflow-hidden">
          <div className="h-[calc(100vh-180px)] p-4">
            <MonacoEditor
              height="100%"
              width="100%"
              language={config.monaco}
              value={generatedCode}
              theme="vs-dark"
              options={{
                fontSize: 14,
                minimap: { enabled: false },
                scrollBeyondLastLine: false,
                wordWrap: "on",
                fontFamily: "Fira Mono, monospace",
                automaticLayout: true,
                lineNumbers: "on",
                roundedSelection: false,
                scrollbar: {
                  vertical: "auto",
                  horizontal: "auto",
                },
                tabSize: 2,
                renderLineHighlight: "all",
                formatOnPaste: true,
                formatOnType: true,
                fixedOverflowWidgets: true,
                readOnly: true,
              }}
            />
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default GeneratedCode;
