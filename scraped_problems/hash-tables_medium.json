{
  "category": "hash-tables",
  "difficulty": "Medium",
  "problems": [
    {
      "id": "12",
      "title": "Integer to Roman",
      "slug": "integer-to-roman",
      "difficulty": "Medium",
      "category": "hash-tables",
      "description": "Seven different symbols represent Roman numerals with the following values: Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 Roman numerals are formed by appending&nbsp;the conversions of&nbsp;decimal place values&nbsp;from highest to lowest. Converting a decimal place value into a Roman numeral has the following rules: If the value does not start with 4 or&nbsp;9, select the symbol of the maximal value that can be subtracted from the input, append that symbol to the result, subtract its value, and convert the remainder to a Roman numeral. If the value starts with 4 or 9 use the&nbsp;subtractive form&nbsp;representing&nbsp;one symbol subtracted from the following symbol, for example,&nbsp;4 is 1 (I) less than 5 (V): IV&nbsp;and 9 is 1 (I) less than 10 (X): IX.&nbsp;Only the following subtractive forms are used: 4 (IV), 9 (IX),&nbsp;40 (XL), 90 (XC), 400 (CD) and 900 (CM). Only powers of 10 (I, X, C, M) can be appended consecutively at most 3 times to represent multiples of 10. You cannot append 5&nbsp;(V), 50 (L), or 500 (D) multiple times. If you need to append a symbol&nbsp;4 times&nbsp;use the subtractive form. Given an integer, convert it to a Roman numeral. &nbsp;",
      "examples": [
        {
          "input": "num = 3749",
          "output": "&quot;MMMDCCXLIX&quot;"
        },
        {
          "input": "num = 58",
          "output": "&quot;LVIII&quot;"
        },
        {
          "input": "num = 1994",
          "output": "&quot;MCMXCIV&quot;"
        }
      ],
      "top_solution": "function intToRoman(num) {\n    const values = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];\n    const symbols = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];\n    \n    let result = '';\n    \n    for (let i = 0; i < values.length; i++) {\n        while (num >= values[i]) {\n            result += symbols[i];\n            num -= values[i];\n        }\n    }\n    \n    return result;\n}\n\nmodule.exports = { intToRoman };",
      "acceptance_rate": 6945.2904530977985,
      "likes": 0,
      "dislikes": 0
    },
    {
      "id": "3",
      "title": "Longest Substring Without Repeating Characters",
      "slug": "longest-substring-without-repeating-characters",
      "difficulty": "Medium",
      "category": "hash-tables",
      "description": "Given a string s, find the length of the longest substring without duplicate characters. &nbsp;",
      "examples": [
        {
          "input": "s = &quot;abcabcbb&quot;",
          "output": "3"
        },
        {
          "input": "s = &quot;bbbbb&quot;",
          "output": "1"
        },
        {
          "input": "s = &quot;pwwkew&quot;",
          "output": "3"
        }
      ],
      "top_solution": "function lengthOfLongestSubstring(s) {\n    const seen = new Set();\n    let left = 0;\n    let maxLength = 0;\n    \n    for (let right = 0; right < s.length; right++) {\n        while (seen.has(s[right])) {\n            seen.delete(s[left]);\n            left++;\n        }\n        \n        seen.add(s[right]);\n        maxLength = Math.max(maxLength, right - left + 1);\n    }\n    \n    return maxLength;\n}\n\nmodule.exports = { lengthOfLongestSubstring };",
      "acceptance_rate": 3762.0353648132955,
      "likes": 0,
      "dislikes": 0
    }
  ]
}