{
  "category": "arrays",
  "problems": [
    {
      "id": "11",
      "title": "Container With Most Water",
      "slug": "container-with-most-water",
      "difficulty": "Medium",
      "category": "arrays",
      "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container. &nbsp;",
      "examples": [
        {
          "input": "height = [1,8,6,2,5,4,8,3,7]",
          "output": "49"
        },
        {
          "input": "height = [1,1]",
          "output": "1"
        }
      ],
      "top_solution": "function maxArea(height) {\n    let left = 0;\n    let right = height.length - 1;\n    let maxWater = 0;\n    \n    while (left < right) {\n        const width = right - left;\n        const minHeight = Math.min(height[left], height[right]);\n        const currentArea = width * minHeight;\n        maxWater = Math.max(maxWater, currentArea);\n        \n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return maxWater;\n}\n\nmodule.exports = { maxArea };",
      "acceptance_rate": 5836.338604322683,
      "likes": 0,
      "dislikes": 0
    },
    {
      "id": "1",
      "title": "Two Sum",
      "slug": "two-sum",
      "difficulty": "Easy",
      "category": "arrays",
      "description": "Given an array of integers nums&nbsp;and an integer target, return indices of the two numbers such that they add up to target. You may assume that each input would have exactly one solution, and you may not use the same element twice. You can return the answer in any order. &nbsp;",
      "examples": [
        {
          "input": "nums = [2,7,11,15], target = 9",
          "output": "[0,1]"
        },
        {
          "input": "nums = [3,2,4], target = 6",
          "output": "[1,2]"
        },
        {
          "input": "nums = [3,3], target = 6",
          "output": "[0,1]"
        }
      ],
      "top_solution": "function twoSum(nums, target) {\n    const map = new Map();\n    \n    for (let i = 0; i < nums.length; i++) {\n        const complement = target - nums[i];\n        \n        if (map.has(complement)) {\n            return [map.get(complement), i];\n        }\n        \n        map.set(nums[i], i);\n    }\n    \n    return [];\n}\n\nmodule.exports = { twoSum };",
      "acceptance_rate": 5634.23315238428,
      "likes": 0,
      "dislikes": 0
    },
    {
      "id": "14",
      "title": "Longest Common Prefix",
      "slug": "longest-common-prefix",
      "difficulty": "Easy",
      "category": "arrays",
      "description": "Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string &quot;&quot;. &nbsp;",
      "examples": [
        {
          "input": "strs = [&quot;flower&quot;,&quot;flow&quot;,&quot;flight&quot;]",
          "output": "&quot;fl&quot;"
        },
        {
          "input": "strs = [&quot;dog&quot;,&quot;racecar&quot;,&quot;car&quot;]",
          "output": "&quot;&quot;"
        }
      ],
      "top_solution": "function longestCommonPrefix(strs) {\n    if (!strs || strs.length === 0) return '';\n    \n    let prefix = strs[0];\n    \n    for (let i = 1; i < strs.length; i++) {\n        while (strs[i].indexOf(prefix) !== 0) {\n            prefix = prefix.substring(0, prefix.length - 1);\n            if (prefix === '') return '';\n        }\n    }\n    \n    return prefix;\n}\n\nmodule.exports = { longestCommonPrefix };",
      "acceptance_rate": 4622.647349255396,
      "likes": 0,
      "dislikes": 0
    },
    {
      "id": "4",
      "title": "Median of Two Sorted Arrays",
      "slug": "median-of-two-sorted-arrays",
      "difficulty": "Hard",
      "category": "arrays",
      "description": "Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). &nbsp;",
      "examples": [
        {
          "input": "nums1 = [1,3], nums2 = [2]",
          "output": "2.00000"
        },
        {
          "input": "nums1 = [1,2], nums2 = [3,4]",
          "output": "2.50000"
        }
      ],
      "top_solution": "function findMedianSortedArrays(nums1, nums2) {\n    if (nums1.length > nums2.length) {\n        [nums1, nums2] = [nums2, nums1];\n    }\n    \n    const m = nums1.length;\n    const n = nums2.length;\n    let left = 0;\n    let right = m;\n    \n    while (left <= right) {\n        const partitionX = Math.floor((left + right) / 2);\n        const partitionY = Math.floor((m + n + 1) / 2) - partitionX;\n        \n        const maxLeftX = partitionX === 0 ? -Infinity : nums1[partitionX - 1];\n        const minRightX = partitionX === m ? Infinity : nums1[partitionX];\n        \n        const maxLeftY = partitionY === 0 ? -Infinity : nums2[partitionY - 1];\n        const minRightY = partitionY === n ? Infinity : nums2[partitionY];\n        \n        if (maxLeftX <= minRightY && maxLeftY <= minRightX) {\n            if ((m + n) % 2 === 0) {\n                return (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY)) / 2;\n            } else {\n                return Math.max(maxLeftX, maxLeftY);\n            }\n        } else if (maxLeftX > minRightY) {\n            right = partitionX - 1;\n        } else {\n            left = partitionX + 1;\n        }\n    }\n    \n    return 0;\n}\n\nmodule.exports = { findMedianSortedArrays };",
      "acceptance_rate": 4479.244224569235,
      "likes": 0,
      "dislikes": 0
    },
    {
      "id": "15",
      "title": "3Sum",
      "slug": "3sum",
      "difficulty": "Medium",
      "category": "arrays",
      "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. &nbsp;",
      "examples": [
        {
          "input": "nums = [-1,0,1,2,-1,-4]",
          "output": "[[-1,-1,2],[-1,0,1]]"
        },
        {
          "input": "nums = [0,1,1]",
          "output": "[]"
        },
        {
          "input": "nums = [0,0,0]",
          "output": "[[0,0,0]]"
        }
      ],
      "top_solution": "function threeSum(nums) {\n    nums.sort((a, b) => a - b);\n    const result = [];\n    \n    for (let i = 0; i < nums.length - 2; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n        \n        let left = i + 1;\n        let right = nums.length - 1;\n        \n        while (left < right) {\n            const sum = nums[i] + nums[left] + nums[right];\n            \n            if (sum === 0) {\n                result.push([nums[i], nums[left], nums[right]]);\n                \n                while (left < right && nums[left] === nums[left + 1]) left++;\n                while (left < right && nums[right] === nums[right - 1]) right--;\n                \n                left++;\n                right--;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    \n    return result;\n}\n\nmodule.exports = { threeSum };",
      "acceptance_rate": 3774.890352695148,
      "likes": 0,
      "dislikes": 0
    }
  ]
}