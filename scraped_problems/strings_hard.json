{
  "category": "strings",
  "difficulty": "Hard",
  "problems": [
    {
      "id": "10",
      "title": "Regular Expression Matching",
      "slug": "regular-expression-matching",
      "difficulty": "Hard",
      "category": "strings",
      "description": "Given an input string s&nbsp;and a pattern p, implement regular expression matching with support for &#39;.&#39; and &#39;*&#39; where: &#39;.&#39; Matches any single character.​​​​ &#39;*&#39; Matches zero or more of the preceding element. The matching should cover the entire input string (not partial). &nbsp;",
      "examples": [
        {
          "input": "s = &quot;aa&quot;, p = &quot;a&quot;",
          "output": "false"
        },
        {
          "input": "s = &quot;aa&quot;, p = &quot;a*&quot;",
          "output": "true"
        },
        {
          "input": "s = &quot;ab&quot;, p = &quot;.*&quot;",
          "output": "true"
        }
      ],
      "top_solution": "function isMatch(s, p) {\n    const memo = new Map();\n    \n    function dp(i, j) {\n        if (memo.has(`${i},${j}`)) {\n            return memo.get(`${i},${j}`);\n        }\n        \n        if (j === p.length) {\n            return i === s.length;\n        }\n        \n        const firstMatch = i < s.length && (p[j] === s[i] || p[j] === '.');\n        \n        let result;\n        if (j + 1 < p.length && p[j + 1] === '*') {\n            result = dp(i, j + 2) || (firstMatch && dp(i + 1, j));\n        } else {\n            result = firstMatch && dp(i + 1, j + 1);\n        }\n        \n        memo.set(`${i},${j}`, result);\n        return result;\n    }\n    \n    return dp(0, 0);\n}\n\nmodule.exports = { isMatch };",
      "acceptance_rate": 2968.4587266573362,
      "likes": 0,
      "dislikes": 0
    }
  ]
}