{
  "category": "arrays",
  "difficulty": "Medium",
  "problems": [
    {
      "id": "11",
      "title": "Container With Most Water",
      "slug": "container-with-most-water",
      "difficulty": "Medium",
      "category": "arrays",
      "description": "You are given an integer array height of length n. There are n vertical lines drawn such that the two endpoints of the ith line are (i, 0) and (i, height[i]). Find two lines that together with the x-axis form a container, such that the container contains the most water. Return the maximum amount of water a container can store. Notice that you may not slant the container. &nbsp;",
      "examples": [
        {
          "input": "height = [1,8,6,2,5,4,8,3,7]",
          "output": "49"
        },
        {
          "input": "height = [1,1]",
          "output": "1"
        }
      ],
      "top_solution": "function maxArea(height) {\n    let left = 0;\n    let right = height.length - 1;\n    let maxWater = 0;\n    \n    while (left < right) {\n        const width = right - left;\n        const minHeight = Math.min(height[left], height[right]);\n        const currentArea = width * minHeight;\n        maxWater = Math.max(maxWater, currentArea);\n        \n        if (height[left] < height[right]) {\n            left++;\n        } else {\n            right--;\n        }\n    }\n    \n    return maxWater;\n}\n\nmodule.exports = { maxArea };",
      "acceptance_rate": 5836.338604322683,
      "likes": 0,
      "dislikes": 0
    },
    {
      "id": "15",
      "title": "3Sum",
      "slug": "3sum",
      "difficulty": "Medium",
      "category": "arrays",
      "description": "Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0. Notice that the solution set must not contain duplicate triplets. &nbsp;",
      "examples": [
        {
          "input": "nums = [-1,0,1,2,-1,-4]",
          "output": "[[-1,-1,2],[-1,0,1]]"
        },
        {
          "input": "nums = [0,1,1]",
          "output": "[]"
        },
        {
          "input": "nums = [0,0,0]",
          "output": "[[0,0,0]]"
        }
      ],
      "top_solution": "function threeSum(nums) {\n    nums.sort((a, b) => a - b);\n    const result = [];\n    \n    for (let i = 0; i < nums.length - 2; i++) {\n        if (i > 0 && nums[i] === nums[i - 1]) continue;\n        \n        let left = i + 1;\n        let right = nums.length - 1;\n        \n        while (left < right) {\n            const sum = nums[i] + nums[left] + nums[right];\n            \n            if (sum === 0) {\n                result.push([nums[i], nums[left], nums[right]]);\n                \n                while (left < right && nums[left] === nums[left + 1]) left++;\n                while (left < right && nums[right] === nums[right - 1]) right--;\n                \n                left++;\n                right--;\n            } else if (sum < 0) {\n                left++;\n            } else {\n                right--;\n            }\n        }\n    }\n    \n    return result;\n}\n\nmodule.exports = { threeSum };",
      "acceptance_rate": 3774.890352695148,
      "likes": 0,
      "dislikes": 0
    }
  ]
}